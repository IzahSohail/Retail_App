generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  auth0Id     String?   @unique
  picture     String?
  gender      String?
  dateOfBirth DateTime?
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sales       Sale[]    @relation("BuyerSales")
  products    Product[] @relation("SellerProducts")
  cart        Cart?

  @@map("users")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]

  @@map("categories")
}

model Product {
  id          String     @id @default(cuid())
  title       String
  description String
  priceMinor  Int
  currency    String     @default("AED")
  stock       Int
  active      Boolean    @default(true)
  categoryId  String
  sellerId    String
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category   @relation(fields: [categoryId], references: [id])
  seller      User       @relation("SellerProducts", fields: [sellerId], references: [id])
  saleItems   SaleItem[]
  cartItems   CartItem[]

  @@index([categoryId])
  @@index([sellerId])
  @@index([active, createdAt])
  @@map("products")
}

model Sale {
  id            String     @id @default(cuid())
  buyerId       String
  status        SaleStatus @default(PENDING)
  subtotalMinor Int
  taxMinor      Int        @default(0)
  feesMinor     Int        @default(0)
  totalMinor    Int
  currency      String     @default("AED")
  createdAt     DateTime   @default(now())
  completedAt   DateTime?
  payment       Payment?
  buyer         User       @relation("BuyerSales", fields: [buyerId], references: [id], onDelete: Cascade)
  items         SaleItem[]

  @@index([buyerId, status])
  @@index([createdAt])
  @@map("sales")
}

model SaleItem {
  id             String  @id @default(cuid())
  saleId         String
  productId      String
  quantity       Int
  unitMinor      Int
  lineTotalMinor Int
  product        Product @relation(fields: [productId], references: [id])
  sale           Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([productId])
  @@map("sale_items")
}

model Payment {
  id            String        @id @default(cuid())
  saleId        String        @unique
  method        PaymentMethod
  status        PaymentStatus
  approvalRef   String?
  failureReason String?
  createdAt     DateTime      @default(now())
  sale          Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  APPROVED
  DECLINED
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELED
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}
